import{s as C}from"./navbar-C-8lifvS.js";import{g as $,d as M,r as y,h as k,b as I,f as g,c as h,a as D,i as N}from"./utility-Cpztc4yD.js";import{W as U}from"./worker-BiNDJZ8E.js";import{A as z}from"./config-C7GNoNA1.js";C("../..");const _="transformers-cache",B="distilbart-cnn-6-6",L=new U,F=document.getElementById("summarizationInput"),O=document.getElementById("summarizationOutput"),f=document.getElementById("progress"),j=document.getElementById("triggerBtn"),x=document.getElementById("loadingModelText"),T=document.getElementById("loadModelPromptContent"),E=document.getElementById("progressBar"),V=document.getElementById("loadModelBtn"),X=document.getElementById("modelPopover"),q=document.getElementById("modelPanelWrapper"),R=$(B),n=M(B),S={max_new_tokens:50,num_beams:2,temperature:1,top_k:0,do_sample:!1};for(const[t,e]of Object.entries(S))document.getElementById(t).value=e;function G(){let t={};for(const[e,r]of Object.entries(S)){const s=document.getElementById(e);s&&s.value!==void 0&&(e==="do_sample"?t[e]=s.value==="true":t[e]=parseInt(s.value))}return t}let P=0;j.addEventListener("click",async t=>{O.value="";const e={baseURI:document.baseURI,task:"summarization",generation:G(),text:F.value,elementIdToUpdate:O.id};P=new Date().getTime(),L.postMessage(e)});L.addEventListener("message",t=>{if(!t.data)return;const e=t.data;switch(e.type){case"download":if(e.data.status==="initiate"){if(!e.data.file||e.data.file.split(".").length>0&&e.data.file.split(".")[1]!=="onnx"||!n[e.data.file]||n[e.data.file].cached)break;const a=e.data.file;if(n[a].cached)break;y(x,f),f.appendChild(k(`<div model="${e.data.name}" file="${e.data.file}"
        class="relative my-4 rounded-2xl w-full min-h-[30px] bg-stone-200/40 flex items-center justify-between font-mono"
      >
    <div class="relative px-2 z-20" name="statusText"></div>
    <div class="relative px-2 z-20">
      <span name="progressVal">0%</span>
    </div>
    <div
      name="progressBar"
      class="absolute top-0 rounded-2xl z-10 text-right bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"
    ></div>
    </div>`))}else{if(e.data.status==="ready"){f.classList.contains("hidden")||f.classList.add("hidden"),x.classList.contains("hidden")||x.classList.add("hidden");break}const a=document.getElementById(`${e.data.file.match(/\/?([^/.]+?)(?:\.[^/.]+)?$/)[1]}StatusBar`),o=f.querySelector(`div[model="${e.data.name}"][file="${e.data.file}"]`);switch(e.data.status){case"progress":if(!e.data.file||!n[e.data.file])break;const d=e.data.file;if(a){if(n[d]&&n[d].cached){a.textContent="loading",h("loading",a),n[d].size=e.data.total;return}else if(a.textContent="downloading",h("loading",a),n[d].size=e.data.total,o!==null){const c=o.querySelector("div[name='statusText']"),l=o.querySelector("div[name='progressBar']"),i=o.querySelector("span[name='progressVal']");l.style.height||(l.style.height="30px"),l.style.width=e.data.progress.toFixed(2)+"%",i.textContent=e.data.progress.toFixed(2)+"%",c.textContent=`${e.data.file} (${g(e.data.loaded)} / ${g(e.data.total)})`}}break;case"done":let m=new Date().getTime();if(o!==null&&o.classList.add("hidden"),y(document.getElementById(`${I(e.data.file)}StatusFlag`)),a){let c="downloaded",l=0;const i=e.data.file;n[i]&&(l=n[i].size,n[i].cached&&(c="cache loaded")),a.textContent=`${c} in ${((m-P)/1e3).toFixed(2)}s(${g(l)})`,h("loaded",a),l=0}break}}break;case"update":let r=e.target,s=document.getElementById(r);s.value=e.data;break;case"complete":document.getElementById(e.target).value=e.data;break}});D(B,q);function W(){z[B].resources.map(t=>{const e=I(t),r=document.getElementById(`uploadInput4${e}`);r&&r.addEventListener("change",async function(s){const a=s.target.files;if(!a.length)return;const o=await caches.open(_);for(const d of a){const m=new FileReader;m.onprogress=function(c){if(c.lengthComputable){const l=c.loaded,i=c.total;y(E),E.innerHTML=`
            <div class="relative px-2 z-20" id="StatusText"></div>
            <div class="relative px-2 z-20">
              <span id="ProgressVal">0%</span>
            </div>
            <div
              id="ProgressBar"
              class="absolute top-0 rounded-2xl z-10 text-right bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500"
            ></div>
         `;const b=document.getElementById("StatusText"),u=document.getElementById("ProgressBar"),v=document.getElementById("ProgressVal");let p=l/i*100;b.textContent="Uploading model ...",u.style.height||(u.style.height="30px"),u.style.width=`${p}%`,v.textContent=`${g(l)}/${g(i)}`}},m.onload=async function(c){const l=c.target.result,i=new Blob([l]),u=(d.name.split(".").length>0?d.name.split(".")[1]:"")==="json"?"text/plain; charset=utf-8":"binary/octet-stream",v=new Response(i,{headers:{"Content-Length":i.size.toString(),"Accept-Ranges":"bytes","Content-Type":u}}),p=R+t;await o.match(p)||o.put(p,v).then(()=>{console.log(`cache ${t} successfully.`),w()}).catch(A=>{console.error(`cache ${t} failed:`,A)}),E.classList.contains("hidden")||E.classList.add("hidden")},m.readAsArrayBuffer(d)}})})}W();async function w(){let t=await caches.open(_);for(const e of Object.keys(n)){let r="",s="";const a=R+e,o=await t.match(a),d=document.getElementById(`${e.match(/\/?([^/.]+?)(?:\.[^/.]+)?$/)[1]}StatusBar`);!o||!o.ok?(r="unload",s="unload"):(r="cached",s="cache available",n[e].cached=!0,T&&!T.classList.contains("hidden")&&T.classList.add("hidden"),y(document.getElementById(`${I(e)}StatusFlag`))),d&&(h(r,d),d.textContent=s)}}await w();N(V,X);
